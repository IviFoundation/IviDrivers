# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
    - refs/heads/main
  batch: True
pool:
  vmImage: 'windows-2022'
variables:
  - group: IviDriverCore
  - name: Project_Name
    value: 'IviDriverNet/1.0/Code/Ivi.DriverCore/Ivi.DriverCore.csproj'
  - name: NuGetConfigPath
    value: '$(Build.SourcesDirectory)/nuget.config'
  - name: MajorVersion
    value: '1'
  - name: MinorVersion
    value: '0'
  - name: PackageOutputPath
    value: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/build/Release'
stages:
- stage: stage_build
  displayName: 'Build and Unit Test'
  jobs:
  - job: job_build
    displayName: 'Build and Unit Test'
    steps:
    - checkout: self
      persistCredentials: true 
      submodules: true
    
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
    - task: DownloadSecureFile@1
      name: StrongName
      displayName: 'Download IVI private key'
      inputs:
        secureFile: ce8dd88f-9893-442d-abe2-a7819b937b73
 
    - task: AzureKeyVault@2
      displayName: 'Get secrets from Azure Key Vault'
      inputs:
        connectedServiceName: 'Azure for IVI'
        KeyVaultName: 'ivi-prod-kv'
        SecretsFilter: 'SigningKeyVaultUri,SigningClientId,SigningClientSecret,SigningCertName,SigningTenantId'
        RunAsPreJob: true      
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'        
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'  
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 6.0.0'
      inputs:
        versionSpec: 6.0.0
    - task: PowerShell@2
      displayName: 'Generate Unique Version'
      inputs:
        targetType: 'inline'
        script: |
          $major = $(MajorVersion)
          $minor = $(MinorVersion)
          $patch = 0
          $build = $(Build.BuildId)
          
          if ($env:BUILD_SOURCEBRANCH -eq "refs/heads/main") {
              $version = "$major.$minor.$patch.$build"
          } else {
              $version = "$major.$minor.$patch-preview.$build"
          }

          Write-Host "##vso[task.setvariable variable=PackageVersion]$version"
          Write-Host "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version"
          Write-Host "Generated PackageVersion: $version"
      name: GenerateVersion
    - task: DotNetCoreCLI@2
      displayName: Install Tools
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'restore'
    - task: NuGetCommand@2
      displayName: 'NuGet Restore for Ivi.DriverCore'
      inputs:
        solution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/Ivi.DriverCore/Ivi.DriverCore.csproj'

    - task: MSBuild@1
      inputs:
        solution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/Ivi.DriverCore/Ivi.DriverCore.csproj'
        msbuildArchitecture: 'x64'
        configuration: 'Release'
        msbuildArguments: '/t:Clean;Build /p:Configuration=Release /p:Version=$(PackageVersion) /p:IncludeRepositoryUrl=false /p:RepositoryUrl="" /p:RepositoryType="" /p:RepositoryBranch="" /p:RepositoryCommit="" /p:EnableSourceControlManagerQueries=false /p:ContinuousIntegrationBuild=false /bl:$(Build.ArtifactStagingDirectory)/logs/Ivi.DriverCore.binlog'
      displayName: 'Build Project with MSBuild'

  
# Install Azure Sign Tool 
    - task: PowerShell@2
      displayName: 'Install AzureSignTool'
      inputs:
        targetType: 'inline'
        script: |
          if (!(Get-Command azuresigntool -ErrorAction SilentlyContinue)) {
              Write-Host "Installing AzureSignTool globally..."
              dotnet tool install --global AzureSignTool
          } else {
              Write-Host "AzureSignTool is already installed."
          }
          # add .NET global tools path to PATH for immediate usage
          $env:Path += ";$env:USERPROFILE\.dotnet\tools"
          [System.Environment]::SetEnvironmentVariable("PATH", $env:Path, [System.EnvironmentVariableTarget]::Process)
 
    # Sign DLLs using Start-Process
    - task: PowerShell@2
      displayName: 'Sign DLLs with AzureSignTool'
      inputs:
        targetType: 'inline'
        script: |
          # Install AzureSignTool
          dotnet tool install --global AzureSignTool
          $env:Path += ";$env:USERPROFILE\.dotnet\tools"
    
          # Ensure AzureSignTool is installed
          $signTool = "AzureSignTool"
          if (!(Get-Command $signTool -ErrorAction SilentlyContinue)) {
              Write-Error "$signTool not found. Ensure it is installed."
              exit 1
          }
    
          # Set signing parameters
          $signParams = @{
              KeyVaultUrl      = "$(SigningKeyVaultUri)"
              ClientId         = "$(SigningClientId)"
              TenantId         = "$(SigningTenantId)"
              ClientSecret     = "$(SigningClientSecret)"
              CertificateName  = "$(SigningCertName)"
              TimestampUrl     = "http://timestamp.digicert.com"
              DigestAlgorithm  = "sha256"
          }
    
          # Get all DLLs to sign
          $dllPaths = Get-ChildItem -Path "$(PackageOutputPath)" -Recurse -Filter *.dll
          if (!$dllPaths) {
              Write-Error "No DLLs found to sign."
              exit 1
          }
    
          foreach ($dll in $dllPaths) {
            AzureSignTool sign $dll.FullName --file-digest $signParams.DigestAlgorithm --timestamp-rfc3161 $signParams.TimestampUrl --timestamp-digest $signParams.DigestAlgorithm --azure-key-vault-url $signParams.KeyVaultUrl --azure-key-vault-client-id $signParams.ClientId --azure-key-vault-tenant-id $signParams.TenantId --azure-key-vault-client-secret $signParams.ClientSecret --azure-key-vault-certificate $signParams.CertificateName
    
            if ($LASTEXITCODE -ne 0) {
                Write-Error "DLL signing failed: $($dll.FullName)"
                exit $LASTEXITCODE
            }
          }
      condition: and(succeeded(), ne(variables['SigningCertName'], ''))

# Pack Signed DLLs into NuGet Package
    - task: MSBuild@1
      displayName: 'Pack NuGet Package with MSBuild to remove repository metadata'
      inputs:
        solution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/Ivi.DriverCore/Ivi.DriverCore.csproj'
        msbuildArchitecture: 'x64'
        configuration: 'Release'
        msbuildArguments: '/t:Pack /p:Configuration=Release /p:PackageVersion=$(PackageVersion) /p:IncludeRepositoryUrl=false /p:RepositoryUrl="" /p:RepositoryType="" /p:RepositoryBranch="" /p:RepositoryCommit="" /p:EnableSourceControlManagerQueries=false /p:ContinuousIntegrationBuild=false'

    - task: PowerShell@2
      displayName: 'Sign NuGet Packages'
      inputs:
        targetType: 'inline'
        script: |
          # Install NuGetKeyVaultSignTool
          dotnet tool install --global NuGetKeyVaultSignTool
          $env:Path += ";$env:USERPROFILE\.dotnet\tools"
          # Ensure the tool is installed
          $nugetSignTool = "NuGetKeyVaultSignTool"
          if (!(Get-Command $nugetSignTool -ErrorAction SilentlyContinue)) {
              Write-Error "$nugetSignTool not found. Ensure it is installed."
              exit 1
          }
          # Set signing parameters
          $signParams = @{
              KeyVaultUrl      = "$(SigningKeyVaultUri)"
              ClientId         = "$(SigningClientId)"
              TenantId         = "$(SigningTenantId)"
              ClientSecret     = "$(SigningClientSecret)"
              CertificateName  = "$(SigningCertName)"
              TimestampUrl     = "http://timestamp.digicert.com"
              DigestAlgorithm  = "sha256"
          }
          # Get all NuGet packages
          $nupkgPaths = Get-ChildItem -Path "$(PackageOutputPath)" -Filter *.nupkg
          if (!$nupkgPaths) {
              Write-Error "No NuGet packages found to sign."
              exit 1
          }
          foreach ($nupkgPath in $nupkgPaths) {
            NuGetKeyVaultSignTool sign $nupkgPath.FullName --file-digest $signParams.DigestAlgorithm --timestamp-rfc3161 $signParams.TimestampUrl --timestamp-digest $signParams.DigestAlgorithm --azure-key-vault-url $signParams.KeyVaultUrl  --azure-key-vault-client-id $signParams.ClientId  --azure-key-vault-tenant-id $signParams.TenantId  --azure-key-vault-client-secret $signParams.ClientSecret   --azure-key-vault-certificate $signParams.CertificateName
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "NuGet package signing failed: $($nupkgPath.FullName)"
                  exit $LASTEXITCODE
              }
          }
      condition: and(succeeded(), ne(variables['SigningCertName'], ''))

    - task: PowerShell@2
      displayName: 'Create Drop Folder and Copy NuGet Package'
      inputs:
        targetType: 'inline'
        script: |
          $dropFolder = "$(Build.ArtifactStagingDirectory)\drop"
          if (!(Test-Path $dropFolder)) {
              New-Item -ItemType Directory -Path $dropFolder | Out-Null
          }
          Copy-Item "$(PackageOutputPath)\*.nupkg" -Destination $dropFolder -Force
 
  # Publish Nuget package to Azure Artifacts
    - task: NuGetAuthenticate@1
      displayName: 'Authenticate to Azure Artifacts'
 
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        solution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/Ivi.DriverCore/Ivi.DriverCore.csproj'
        selectOrConfig: config
        nugetConfigPath: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/nuget.config'

    - task: PowerShell@2
      displayName: 'Verify Binlog File Exists Before Moving'
      inputs:
        targetType: 'inline'
        script: |
          $binlogPath = "$(Build.ArtifactStagingDirectory)\logs\Ivi.DriverCore.binlog"
          if (Test-Path $binlogPath) {
              Write-Host "MSBuild binlog file found: $binlogPath"
          } else {
              Write-Error " MSBuild binlog file NOT FOUND! Build might have skipped logging."
          }

    - task: PowerShell@2
      displayName: 'Move MSBuild binlog to drop/logs'
      inputs:
        targetType: 'inline'
        script: |
          $sourceBinlog = "$(Build.ArtifactStagingDirectory)\logs\Ivi.DriverCore.binlog"
          $destinationBinlog = "$(Build.ArtifactStagingDirectory)\drop\logs"

          # Ensure the destination directory exists
          if (!(Test-Path $destinationBinlog)) {
              New-Item -ItemType Directory -Path $destinationBinlog -Force | Out-Null
          }

          # Check if binlog exists before moving
          if (Test-Path $sourceBinlog) {
              Move-Item -Path $sourceBinlog -Destination $destinationBinlog -Force
              Write-Host " Successfully moved binlog to: $destinationBinlog"
          } else {
              Write-Error " ERROR: MSBuild binlog not found at $sourceBinlog"
          }

    - task: PowerShell@2
      displayName: 'Copy NuGet Packages to Drop'
      inputs:
        targetType: 'inline'
        script: |
          $dropFolder = "$(Build.ArtifactStagingDirectory)\drop"
          if (!(Test-Path $dropFolder)) {
              New-Item -ItemType Directory -Path $dropFolder | Out-Null
          }
          Copy-Item "$(PackageOutputPath)\*.nupkg" -Destination $dropFolder -Force
          Write-Host "Copied NuGet packages to $dropFolder"

    - task: PowerShell@2
      displayName: 'Copy NuGet Package from Drop to LocalFeed'
      inputs:
        targetType: 'inline'
        script: |
          $source = "$(Build.ArtifactStagingDirectory)\drop"
          $destination = "$(Build.SourcesDirectory)\build\Release"
          if (!(Test-Path $destination)) {
              New-Item -ItemType Directory -Path $destination | Out-Null
          }
          Copy-Item "$source\*.nupkg" -Destination $destination -Force
          Write-Host "Copied NuGet package to LocalFeed: $destination"
    - task: NuGetCommand@2
      displayName: 'NuGet Restore for AcmeDriver'
      inputs:
        command: 'restore'
        restoreSolution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/AcmeDriver/AcmeDriver.csproj'
        feedsToUse: 'config'
        nugetConfigPath: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/nuget.config'
    

    - task: MSBuild@1
      displayName: 'Build AcmeDriver Project'
      inputs:
        solution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/AcmeDriver/AcmeDriver.csproj'
        msbuildArchitecture: 'x64'
        configuration: 'Release'
        msbuildArguments: '/p:Configuration=Release /p:Version=$(PackageVersion)'
    - task: PowerShell@2
      displayName: 'Copy AcmeDriver NuGet Package to Drop'
      inputs:
        targetType: 'inline'
        script: |
          $dropFolder = "$(Build.ArtifactStagingDirectory)\drop"
          Copy-Item "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/build/Release/Acme.AcmeDriver.*.nupkg" -Destination $dropFolder -Force
          Write-Host "Copied Acme.AcmeDriver to Drop: $dropFolder"
    - task: PowerShell@2
      displayName: 'List NuGet Packages in Drop Folder'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "NuGet packages found in $(Build.ArtifactStagingDirectory)/drop/:"
          Get-ChildItem "$(Build.ArtifactStagingDirectory)/drop/" -Filter "*.nupkg" | ForEach-Object { Write-Host $_.Name }

    - task: PowerShell@2
      displayName: 'Select IviFoundation.DriverCore NuGet Package'
      inputs:
        targetType: 'inline'
        script: |
          $dropFolder = "$(Build.ArtifactStagingDirectory)\drop"
          $IviFoundationDriverCorePackage = Get-ChildItem "$dropFolder\IviFoundation.DriverCore*.nupkg" | Sort-Object Name | Select-Object -First 1
          if ($IviFoundationDriverCorePackage) {
            Write-Host "Found IviFoundation.DriverCorepackage: $($IviFoundationDriverCore.FullName)"
            Write-Host "##vso[task.setvariable variable=IviFoundationDriverCore]$($IviFoundationDriverCore.FullName)"
          } else {
            Write-Error "IviFoundation.DriverCore package not found in drop folder!"
          }

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Nuget Inside Drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)\drop'
        artifactName: 'drop'

- stage: stage_integration_test
  displayName: 'Integration Test '
  dependsOn: stage_build
  variables:
    
    PackageVersion: $[ stageDependencies.stage_build.job_build.outputs['GenerateVersion.PackageVersion'] ]
  jobs:
  - job: job_integration_test
    displayName: 'Integration Test '
    steps:
    - checkout: self
      persistCredentials: true

    - task: PowerShell@2
      displayName: 'Debug PackageVersion in Integration Test'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "PackageVersion in Integration Test: $(PackageVersion)"
          if ("$(PackageVersion)" -eq "") {
              Write-Error "PackageVersion is EMPTY in Integration Test Stage!"
          }

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Drop Folder'
      inputs:
        artifactName: 'drop'
        targetPath: '$(Build.SourcesDirectory)\drop'
    - task: PowerShell@2
      displayName: 'Clean LocalFeed before copying packages'
      inputs:
        targetType: 'inline'
        script: |
          $localFeed = "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/build/Release"
          if (Test-Path $localFeed) {
              Remove-Item "$localFeed\*" -Force -Recurse
              Write-Host "Cleared existing LocalFeed at $localFeed"
          } else {
              New-Item -ItemType Directory -Path $localFeed | Out-Null
              Write-Host "Created LocalFeed directory at $localFeed"
          }        
    - task: PowerShell@2
      displayName: 'Copy NuGet Packages to LocalFeed for AcmeExample'
      inputs:
        targetType: 'inline'
        script: |
          $source = "$(Build.SourcesDirectory)\drop"
          $destination = "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\Release"
          if (!(Test-Path $destination)) {
              New-Item -ItemType Directory -Path $destination | Out-Null
          }
          Copy-Item "$source\*.nupkg" -Destination $destination -Force
          Write-Host "Copied NuGet packages to LocalFeed: $destination"


    - task: PowerShell@2
      displayName: 'Clear NuGet Caches'
      inputs:
        targetType: 'inline'
        script: |
          nuget locals http-cache -clear
          nuget locals global-packages -clear
          nuget locals temp -clear
          nuget locals all -clear
          
    - task: NuGetCommand@2
      displayName: 'NuGet Restore for AcmeExample'
      inputs:
        command: 'restore'
        restoreSolution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/AcmeExample/AcmeExample.csproj'
        nugetConfigPath: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/nuget.config'
        feedsToUse: 'config'
        version: '6.0.0'

    - task: MSBuild@1
      displayName: 'Build AcmeExample Project (x64 - net6.0 and net462)'
      inputs:
        solution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/AcmeExample/AcmeExample.csproj'
        msbuildArchitecture: 'x64'
        configuration: 'Release'
        msbuildArguments: '/p:Platform=x64 /p:Configuration=Release /p:Version=$(PackageVersion) /p:NuGetVersion=$(PackageVersion) /p:NuGetVersionOverride=1.0.0'

    - task: MSBuild@1
      displayName: 'Build AcmeExample Project (x86 - net6.0 and net462)'
      inputs:
        solution: '$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/AcmeExample/AcmeExample.csproj'
        msbuildArchitecture: 'x86'
        configuration: 'Release'
        msbuildArguments: '/p:Platform=x86 /p:Configuration=Release /p:Version=$(PackageVersion) /p:NuGetVersion=$(PackageVersion) /p:NuGetVersionOverride=1.0.0'

    - task: PowerShell@2
      displayName: 'Verify AcmeExample EXEs (x86 and x64)'
      inputs:
        targetType: 'inline'
        script: |
          $x86Net60Path = "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code/build\x86\Release\net6.0"
          $x86Net462Path = "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\x86\Release\net462"
          $x64Net60Path = "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\x64\Release\net6.0"
          $x64Net462Path = "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\x64\Release\net462"

          # Check if folders exist
          if (!(Test-Path $x86Net60Path) -or !(Test-Path $x86Net462Path) -or !(Test-Path $x64Net60Path) -or !(Test-Path $x64Net462Path)) {
            Write-Warning "One or more expected build folders are missing."
          }

          # Get EXE files
          $x86Net60Exe = Get-ChildItem "$x86Net60Path" -Filter "*.exe" -Recurse
          $x86Net462Exe = Get-ChildItem "$x86Net462Path" -Filter "*.exe" -Recurse
          $x64Net60Exe = Get-ChildItem "$x64Net60Path" -Filter "*.exe" -Recurse
          $x64Net462Exe = Get-ChildItem "$x64Net462Path" -Filter "*.exe" -Recurse

          # Check and print results
          if ($x86Net60Exe.Count -eq 0 -and $x86Net462Exe.Count -eq 0 -and $x64Net60Exe.Count -eq 0 -and $x64Net462Exe.Count -eq 0) {
            Write-Error "No AcmeExample.exe found in any expected folders."
          }

          if ($x86Net60Exe.Count -gt 0) {
            Write-Host " Found x86 net6.0 EXEs:"
            foreach ($exeFile in $x86Net60Exe) { Write-Host "  - $($exeFile.FullName)" }
          } else { Write-Warning " No x86 net6.0 EXE found." }

          if ($x86Net462Exe.Count -gt 0) {
            Write-Host " Found x86 net462 EXEs:"
            foreach ($exeFile in $x86Net462Exe) { Write-Host "  - $($exeFile.FullName)" }
          } else { Write-Warning " No x86 net462 EXE found." }

          if ($x64Net60Exe.Count -gt 0) {
            Write-Host " Found x64 net6.0 EXEs:"
            foreach ($exeFile in $x64Net60Exe) { Write-Host "  - $($exeFile.FullName)" }
          } else { Write-Warning " No x64 net6.0 EXE found." }

          if ($x64Net462Exe.Count -gt 0) {
            Write-Host " Found x64 net462 EXEs:"
            foreach ($exeFile in $x64Net462Exe) { Write-Host "  - $($exeFile.FullName)" }
          } else { Write-Warning " No x64 net462 EXE found." }


    - task: PowerShell@2
      displayName: 'Organize AcmeExample EXEs in Example Folder'
      inputs:
        targetType: 'inline'
        script: |
          $exampleFolder = "$(Build.ArtifactStagingDirectory)\drop\Example"
          $x64Folder = "$exampleFolder\x64"
          $x86Folder = "$exampleFolder\x86"

          # Ensure Example folder exists inside drop
          if (!(Test-Path $exampleFolder)) { New-Item -ItemType Directory -Path $exampleFolder | Out-Null }

          # Create the folder structure
          if (!(Test-Path $x64Folder)) { New-Item -ItemType Directory -Path $x64Folder | Out-Null }
          if (!(Test-Path $x86Folder)) { New-Item -ItemType Directory -Path $x86Folder | Out-Null }

          # Create subfolders for net6.0 and net462 inside x64 and x86
          $x64Net60Folder = "$x64Folder\net6.0"
          $x64Net462Folder = "$x64Folder\net462"
          $x86Net60Folder = "$x86Folder\net6.0"
          $x86Net462Folder = "$x86Folder\net462"

          if (!(Test-Path $x64Net60Folder)) { New-Item -ItemType Directory -Path $x64Net60Folder | Out-Null }
          if (!(Test-Path $x64Net462Folder)) { New-Item -ItemType Directory -Path $x64Net462Folder | Out-Null }
          if (!(Test-Path $x86Net60Folder)) { New-Item -ItemType Directory -Path $x86Net60Folder | Out-Null }
          if (!(Test-Path $x86Net462Folder)) { New-Item -ItemType Directory -Path $x86Net462Folder | Out-Null }

          # Copy EXEs to their respective folders (Corrected Paths)
          Copy-Item "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\x64\Release\net6.0\AcmeExample.exe" -Destination $x64Net60Folder -Force -ErrorAction SilentlyContinue
          Copy-Item "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\x64\Release\net462\AcmeExample.exe" -Destination $x64Net462Folder -Force -ErrorAction SilentlyContinue
          Copy-Item "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\x86\Release\net6.0\AcmeExample.exe" -Destination $x86Net60Folder -Force -ErrorAction SilentlyContinue
          Copy-Item "$(Build.SourcesDirectory)/IviDriverNet/1.0/Code\build\x86\Release\net462\AcmeExample.exe" -Destination $x86Net462Folder -Force -ErrorAction SilentlyContinue

          Write-Host " Copied net6.0 and net462 executables to Example folder inside drop"

       
    - task: PublishPipelineArtifact@1
      displayName: 'Publish  Example '
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)\drop\example'
        artifactName: 'Example'
 
 
- stage: stage_release_dev
  displayName: 'Release to Dev'
  dependsOn: 
    - stage_build
    - stage_integration_test
  condition: succeeded()
  jobs:
    - deployment: release_dev 
      displayName: 'Release to Dev'
      environment: 'artifacts-ividrivercore-feed'  
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: none
 
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Drop Artifact'
              inputs:
                artifactName: 'drop'
                targetPath: '$(Pipeline.Workspace)/drop'
            - task: NuGetCommand@2
              displayName: 'Push NuGet Packages to Artifact'
              inputs:
                command: 'push'
                packagesToPush: '$(Pipeline.Workspace)/drop/IviFoundation.DriverCore*.nupkg'
                nuGetFeedType: 'internal'
                publishVstsFeed: '71dc34a4-8044-4631-b7bd-abb37cf10b72'
 
- stage: stage_release_prod
  displayName: 'Release to Prod'
  dependsOn: stage_release_dev
  condition: succeeded()  # Ensure this stage always runs if the previous stage succeeds
  jobs:
    - deployment: release_prod 
      displayName: 'Release to Prod'
      environment: 'artifacts-ividrivercore-feed'  
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: none
 
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Drop Artifact'
              inputs:
                artifactName: 'drop'
                targetPath: '$(Pipeline.Workspace)/drop'
            - task: PowerShell@2
              displayName: 'Push IviFoundation.DriverCore Package to NuGet.org'
              inputs:
                targetType: 'inline'
                script: |
                  $packagePath = "$(Pipeline.Workspace)\drop\IviFoundation.DriverCore*.nupkg"
                  if (Test-Path $packagePath) {
                    Write-Host "Found package at $packagePath. Proceeding to push."
                    nuget push $packagePath `
                      -Source "https://api.nuget.org/v3/index.json" `
                      -ApiKey "$(NuGetApiKey)" `
                      -SkipDuplicate
                  } else {
                    Write-Error "IviFoundation.DriverCore package not found at $packagePath"
                    exit 1
                  }